/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/11.0.4
 * Generated at: 2025-03-11 23:56:58 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;
import java.util.List;
import ucl.ac.uk.notesapp.model.entity.Note;

public final class form_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports,
                 org.apache.jasper.runtime.JspSourceDirectives {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = new java.util.LinkedHashSet<>(3);
    _jspx_imports_classes.add("java.util.List");
    _jspx_imports_classes.add("ucl.ac.uk.notesapp.model.entity.Note");
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public boolean getErrorOnELNotFound() {
    return false;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write('\r');
      out.write('\n');
      out.write('\r');
      out.write('\n');
      out.write("\r\n");
      out.write("\r\n");
      out.write('\r');
      out.write('\n');
      out.write('\r');
      out.write('\n');
      out.write('\r');
      out.write('\n');
      out.write('\r');
      out.write('\n');
      out.write('\r');
      out.write('\n');
      out.write('\r');
      out.write('\n');
      out.write('\r');
      out.write('\n');
      out.write('\r');
      out.write('\n');
      out.write('\r');
      out.write('\n');
      out.write('\r');
      out.write('\n');
      out.write('\r');
      out.write('\n');
      out.write('\r');
      out.write('\n');
      out.write('\r');
      out.write('\n');
      out.write('\r');
      out.write('\n');
      out.write('\r');
      out.write('\n');
      out.write('\r');
      out.write('\n');
      out.write('\r');
      out.write('\n');
      out.write('\r');
      out.write('\n');
      out.write('\r');
      out.write('\n');
      out.write('\r');
      out.write('\n');
      out.write('\r');
      out.write('\n');
      out.write('\r');
      out.write('\n');
      out.write('\r');
      out.write('\n');
      out.write('\r');
      out.write('\n');
      out.write('\r');
      out.write('\n');
      out.write('\r');
      out.write('\n');
      out.write('\r');
      out.write('\n');
      out.write('\r');
      out.write('\n');
      out.write('\r');
      out.write('\n');
      out.write('\r');
      out.write('\n');
      out.write('\r');
      out.write('\n');
      out.write('\r');
      out.write('\n');
      out.write('\r');
      out.write('\n');
      out.write('\r');
      out.write('\n');
      out.write('\r');
      out.write('\n');
      out.write('\r');
      out.write('\n');
      out.write('\r');
      out.write('\n');
      out.write('\r');
      out.write('\n');
      out.write('\r');
      out.write('\n');
      out.write('\r');
      out.write('\n');
      out.write('\r');
      out.write('\n');
      out.write('\r');
      out.write('\n');
      out.write('\r');
      out.write('\n');
      out.write('\r');
      out.write('\n');
      out.write('\r');
      out.write('\n');
      out.write('\r');
      out.write('\n');
      out.write('\r');
      out.write('\n');
      out.write('\r');
      out.write('\n');
      out.write('\r');
      out.write('\n');
      out.write('\r');
      out.write('\n');
      out.write('\r');
      out.write('\n');
      out.write('\r');
      out.write('\n');
      out.write('\r');
      out.write('\n');
      out.write('\r');
      out.write('\n');
      out.write('\r');
      out.write('\n');
      out.write('\r');
      out.write('\n');
      out.write('\r');
      out.write('\n');
      out.write('\r');
      out.write('\n');
      out.write('\r');
      out.write('\n');
      out.write('\r');
      out.write('\n');
      out.write('\r');
      out.write('\n');
      out.write('\r');
      out.write('\n');
      out.write('\r');
      out.write('\n');
      out.write('\r');
      out.write('\n');
      out.write('\r');
      out.write('\n');
      out.write('\r');
      out.write('\n');
      out.write('\r');
      out.write('\n');
      out.write('\r');
      out.write('\n');
      out.write('\r');
      out.write('\n');
      out.write('\r');
      out.write('\n');
      out.write('\r');
      out.write('\n');
      out.write('\r');
      out.write('\n');
      out.write('\r');
      out.write('\n');
      out.write('\r');
      out.write('\n');
      out.write('\r');
      out.write('\n');
      out.write('\r');
      out.write('\n');
      out.write('\r');
      out.write('\n');
      out.write('\r');
      out.write('\n');
      out.write('\r');
      out.write('\n');
      out.write('\r');
      out.write('\n');
      out.write('\r');
      out.write('\n');
      out.write('\r');
      out.write('\n');
      out.write('\r');
      out.write('\n');
      out.write('\r');
      out.write('\n');
      out.write('\r');
      out.write('\n');
      out.write('\r');
      out.write('\n');
      out.write('\r');
      out.write('\n');
      out.write("\r\n");
      out.write("\r\n");
      out.write('\r');
      out.write('\n');
      out.write('\r');
      out.write('\n');
      out.write('\r');
      out.write('\n');
      out.write("\r\n");
      out.write("\r\n");
      out.write('\r');
      out.write('\n');
      out.write("\r\n");
      out.write("\r\n");
      out.write('\r');
      out.write('\n');
      out.write('\r');
      out.write('\n');
      out.write("\r\n");
      out.write("\r\n");
      out.write('\r');
      out.write('\n');
      out.write('\r');
      out.write('\n');
      out.write('\r');
      out.write('\n');
      out.write('\r');
      out.write('\n');
      out.write('\r');
      out.write('\n');
      out.write('\r');
      out.write('\n');
      out.write("\r\n");
      out.write("\r\n");
      out.write('\r');
      out.write('\n');
      out.write('\r');
      out.write('\n');
      out.write("\r\n");
      out.write("\r\n");
      out.write('\r');
      out.write('\n');
      out.write('\r');
      out.write('\n');
      out.write('\r');
      out.write('\n');
      out.write('\r');
      out.write('\n');
      out.write('\r');
      out.write('\n');
      out.write('\r');
      out.write('\n');
      out.write('\r');
      out.write('\n');
      out.write('\r');
      out.write('\n');
      out.write('\r');
      out.write('\n');
      out.write('\r');
      out.write('\n');
      out.write('\r');
      out.write('\n');
      out.write('\r');
      out.write('\n');
      out.write('\r');
      out.write('\n');
      out.write('\r');
      out.write('\n');
      out.write('\r');
      out.write('\n');
      out.write('\r');
      out.write('\n');
      out.write("\r\n");
      out.write("\r\n");
      out.write('\r');
      out.write('\n');
      out.write('\r');
      out.write('\n');
      out.write("\r\n");
      out.write("\r\n");
      out.write('\r');
      out.write('\n');
      out.write('\r');
      out.write('\n');
      out.write('\r');
      out.write('\n');
      out.write('\r');
      out.write('\n');
      out.write("\r\n");
      out.write("\r\n");
      out.write('\r');
      out.write('\n');
      out.write('\r');
      out.write('\n');
      out.write("\r\n");
      out.write("\r\n");
      out.write('\r');
      out.write('\n');
      out.write('\r');
      out.write('\n');
      out.write('\r');
      out.write('\n');
      out.write('\r');
      out.write('\n');
      out.write('\r');
      out.write('\n');
      out.write('\r');
      out.write('\n');
      out.write("\r\n");
      out.write("\r\n");
      out.write('\r');
      out.write('\n');
      out.write('\r');
      out.write('\n');
      out.write('\r');
      out.write('\n');
      out.write("\r\n");
      out.write("\r\n");
      out.write('\r');
      out.write('\n');
      out.write('\r');
      out.write('\n');
      out.write('\r');
      out.write('\n');
      out.write('\r');
      out.write('\n');
      out.write('\r');
      out.write('\n');
      out.write("\r\n");
      out.write("\r\n");
      out.write('\r');
      out.write('\n');
      out.write('\r');
      out.write('\n');
      out.write('\r');
      out.write('\n');
      out.write("\r\n");
      out.write("\r\n");
      out.write('\r');
      out.write('\n');
      out.write('\r');
      out.write('\n');
      out.write("\r\n");
      out.write("\r\n");
      out.write('\r');
      out.write('\n');
      out.write('\r');
      out.write('\n');
      out.write('\r');
      out.write('\n');
      out.write('\r');
      out.write('\n');
      out.write("\r\n");
      out.write("\r\n");
      out.write('\r');
      out.write('\n');
      out.write('\r');
      out.write('\n');
      out.write('\r');
      out.write('\n');
      out.write('\r');
      out.write('\n');
      out.write('\r');
      out.write('\n');
      out.write('\r');
      out.write('\n');
      out.write('\r');
      out.write('\n');
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("    <meta charset=\"UTF-8\">\r\n");
      out.write("    <title>New Note</title>\r\n");
      out.write("    <style>\r\n");
      out.write("        body {\r\n");
      out.write("            margin: 0;\r\n");
      out.write("            font-family: 'Arial', sans-serif;\r\n");
      out.write("            background-color: #000;\r\n");
      out.write("            color: #fff;\r\n");
      out.write("            display: flex;\r\n");
      out.write("            justify-content: center;\r\n");
      out.write("            align-items: center;\r\n");
      out.write("            height: 100vh;\r\n");
      out.write("            padding: 20px 0;\r\n");
      out.write("        }\r\n");
      out.write("        .form-container {\r\n");
      out.write("            background-color: #1a1a1a;\r\n");
      out.write("            border: 4px solid #333;\r\n");
      out.write("            border-radius: 12px;\r\n");
      out.write("            padding: 20px;\r\n");
      out.write("            box-shadow: 10px 10px 15px rgba(0, 0, 0, 0.5);\r\n");
      out.write("            width: 500px;\r\n");
      out.write("            display: flex;\r\n");
      out.write("            flex-direction: column;\r\n");
      out.write("            gap: 15px;\r\n");
      out.write("            position: relative;\r\n");
      out.write("        }\r\n");
      out.write("        .form-container input[type=\"text\"],\r\n");
      out.write("        .form-container select,\r\n");
      out.write("        .form-container textarea {\r\n");
      out.write("            width: 100%;\r\n");
      out.write("            padding: 10px;\r\n");
      out.write("            margin-bottom: 10px;\r\n");
      out.write("            background-color: #333;\r\n");
      out.write("            border: 1px solid #444;\r\n");
      out.write("            border-radius: 5px;\r\n");
      out.write("            color: #fff;\r\n");
      out.write("            font-size: 14px;\r\n");
      out.write("            box-sizing: border-box;\r\n");
      out.write("        }\r\n");
      out.write("        .form-container textarea {\r\n");
      out.write("            resize: vertical;\r\n");
      out.write("            min-height: 150px;\r\n");
      out.write("        }\r\n");
      out.write("        .form-container input[type=\"checkbox\"] {\r\n");
      out.write("            margin-right: 10px;\r\n");
      out.write("        }\r\n");
      out.write("        hr {\r\n");
      out.write("            border: 0;\r\n");
      out.write("            border-top: 1px solid #444;\r\n");
      out.write("            margin: 15px 0;\r\n");
      out.write("        }\r\n");
      out.write("        .save-notice {\r\n");
      out.write("            position: absolute;\r\n");
      out.write("            right: 20px;\r\n");
      out.write("            top: 10px;\r\n");
      out.write("            color: #0f0;\r\n");
      out.write("            font-size: 12px;\r\n");
      out.write("            display: none;\r\n");
      out.write("        }\r\n");
      out.write("        .save-notice.show {\r\n");
      out.write("            display: block;\r\n");
      out.write("        }\r\n");
      out.write("    </style>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("<div class=\"form-container\">\r\n");
      out.write("    <p>");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${action}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("</p>\r\n");
      out.write("    <form id=\"noteForm\" action=\"/crud/createNote\" method=\"post\">\r\n");
      out.write("        <input type=\"text\" name=\"title\" id=\"noteTitle\" placeholder=\"Input title...\" required>\r\n");
      out.write("        <select name=\"subject\" id=\"noteSubject\">\r\n");
      out.write("            ");
 List<String> subjects = (List<String>) request.getAttribute("subjects");
                for(String subject : subjects) {
                    if(!subject.equals("RecycleBin")) { 
      out.write("\r\n");
      out.write("            <option value=\"");
      out.print(subject);
      out.write('"');
      out.write('>');
      out.print( subject );
      out.write("</option>\r\n");
      out.write("            ");
  } } 
      out.write("\r\n");
      out.write("        </select>\r\n");
      out.write("        <hr>\r\n");
      out.write("        <br>\r\n");
      out.write("        <input type=\"checkbox\" name=\"labels\" value=\"label1\">LABEL1\r\n");
      out.write("        <input type=\"checkbox\" name=\"labels\" value=\"label2\">LABEL2\r\n");
      out.write("        <input type=\"checkbox\" name=\"labels\" value=\"label3\">LABEL3\r\n");
      out.write("        <br>\r\n");
      out.write("        <textarea rows=\"7\" cols=\"42\" name=\"content\" id=\"noteContent\" placeholder=\"Enter...\"></textarea>\r\n");
      out.write("    </form>\r\n");
      out.write("\r\n");
      out.write("    <button type=\"button\" id=\"deleteButton\" style=\"display: none\" onclick=\"deleteNote()\">Delete</button>\r\n");
      out.write("    <a href=\"/load/loadNoteList\" class=\"back-link\" id=\"backLink\">Back to All Notes</a>\r\n");
      out.write("    <span class=\"save-notice\" id=\"saveNotice\">Saved!</span>\r\n");
      out.write("</div>\r\n");
      out.write("\r\n");
      out.write("<script>\r\n");
      out.write("    let currentNoteId = \"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${action}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\" === \"edit\" ? \"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${note.id}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\" : null;\r\n");
      out.write("\r\n");
      out.write("    function saveNote() {\r\n");
      out.write("        const title = document.getElementById(\"noteTitle\").value.trim();\r\n");
      out.write("        if (!title) return; // 标题必须存在\r\n");
      out.write("\r\n");
      out.write("        const params = new URLSearchParams();\r\n");
      out.write("        const formData = new FormData(document.getElementById(\"noteForm\"));\r\n");
      out.write("        params.append(\"title\", formData.get(\"title\"));\r\n");
      out.write("        params.append(\"subject\", formData.get(\"subject\"));\r\n");
      out.write("        params.append(\"content\", formData.get(\"content\"));\r\n");
      out.write("        const labels = formData.getAll(\"labels\");\r\n");
      out.write("        labels.forEach(label => params.append(\"labels\", label));\r\n");
      out.write("\r\n");
      out.write("        const url = currentNoteId ?\r\n");
      out.write("            \"/crud/updateNote?id=\" + encodeURIComponent(currentNoteId) :\r\n");
      out.write("            \"/crud/createNote\";\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("        fetch(url, {\r\n");
      out.write("            method: \"POST\",\r\n");
      out.write("            headers: {\r\n");
      out.write("                \"Content-Type\": \"application/x-www-form-urlencoded\"\r\n");
      out.write("            },\r\n");
      out.write("            body: params.toString()\r\n");
      out.write("        })\r\n");
      out.write("            .then(response => {\r\n");
      out.write("                if (!currentNoteId) { // 创建模式下获取 ID\r\n");
      out.write("                    return response.text().then(id => {\r\n");
      out.write("                        currentNoteId = id; // 保存 ID\r\n");
      out.write("                        console.log(currentNoteId);\r\n");
      out.write("                        document.getElementById(\"noteForm\").action = `/crud/updateNote?id=");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${id}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("`;\r\n");
      out.write("                        document.getElementById(\"deleteButton\").style.display = \"inline-block\";\r\n");
      out.write("                    });\r\n");
      out.write("                }\r\n");
      out.write("            })\r\n");
      out.write("            .then(() => {\r\n");
      out.write("                document.getElementById(\"saveNotice\").classList.add(\"show\");\r\n");
      out.write("                setTimeout(hideSaveNotice, 1000); // 1秒后隐藏提示\r\n");
      out.write("            });\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    function hideSaveNotice() {\r\n");
      out.write("        document.getElementById(\"saveNotice\").classList.remove(\"show\");\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    function fillForm(title, subject, content) {\r\n");
      out.write("        document.getElementById(\"noteTitle\").value = title;\r\n");
      out.write("        document.getElementById(\"noteSubject\").value = subject;\r\n");
      out.write("        document.getElementById(\"noteContent\").value = content;\r\n");
      out.write("\r\n");
      out.write("        const labelCheckboxes = document.querySelectorAll('input[name=\"labels\"]');\r\n");
      out.write("\r\n");
      out.write("        labelCheckboxes.forEach(checkbox => {\r\n");
      out.write("            checkbox.checked = labels.includes(checkbox.value);\r\n");
      out.write("        });\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    function deleteNote() {\r\n");
      out.write("        fetch(`/crud/deleteNote?id=");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${currentNoteId}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("`, { method: \"post\" });\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    if (\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${action}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\" === \"edit\") {\r\n");
      out.write("        const tagsString = \"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${note.tags}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\";\r\n");
      out.write("        const labels = tagsString\r\n");
      out.write("            .replace(/^\\[|\\]$/g, '')\r\n");
      out.write("            .split(',')\r\n");
      out.write("            .map(label => label.trim());\r\n");
      out.write("\r\n");
      out.write("        fillForm(\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${note.title}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\", \"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${note.subject}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\", \"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${note.content}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\", labels);\r\n");
      out.write("        document.getElementById(\"noteForm\").action = `/crud/updateNote?id=");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${note.id}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("`;\r\n");
      out.write("        document.getElementById(\"deleteButton\").style.display = \"inline-block\";\r\n");
      out.write("\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    const formContainer = document.querySelector('.form-container');\r\n");
      out.write("    const titleInput = document.getElementById(\"noteTitle\");\r\n");
      out.write("    const contentInput = document.getElementById(\"noteContent\");\r\n");
      out.write("\r\n");
      out.write("    // 防抖函数，避免频繁保存\r\n");
      out.write("    function debounce(func, wait) {\r\n");
      out.write("        let timeoutId;\r\n");
      out.write("        return function() {\r\n");
      out.write("            clearTimeout(timeoutId);\r\n");
      out.write("            timeoutId = setTimeout(func, wait);\r\n");
      out.write("        };\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    // 检查输入框是否聚焦\r\n");
      out.write("    function isInputFocused() {\r\n");
      out.write("        return document.activeElement === titleInput ||\r\n");
      out.write("            document.activeElement === contentInput;\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    // 监听鼠标离开 form-container\r\n");
      out.write("    formContainer.addEventListener('mouseleave', debounce(() => {\r\n");
      out.write("        if (!isInputFocused()) saveNote();\r\n");
      out.write("    }, 500));\r\n");
      out.write("\r\n");
      out.write("    // 监听输入框失去焦点\r\n");
      out.write("    [titleInput, contentInput].forEach(input => {\r\n");
      out.write("        input.addEventListener('blur', debounce(saveNote, 500));\r\n");
      out.write("        input.addEventListener('focus', hideSaveNotice);\r\n");
      out.write("    });\r\n");
      out.write("\r\n");
      out.write("    // 点击返回时保存并跳转\r\n");
      out.write("    document.getElementById('backLink').addEventListener('click', function(e) {\r\n");
      out.write("        e.preventDefault();\r\n");
      out.write("        saveNote();\r\n");
      out.write("        setTimeout(() => window.location.href = this.href, 500); // 等待保存完成\r\n");
      out.write("    });\r\n");
      out.write("</script>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
