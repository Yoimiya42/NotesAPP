/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/11.0.4
 * Generated at: 2025-03-11 01:18:39 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;
import ucl.ac.uk.notesapp.model.entity.Note;
import java.util.List;

public final class allNotes_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports,
                 org.apache.jasper.runtime.JspSourceDirectives {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = new java.util.LinkedHashSet<>(3);
    _jspx_imports_classes.add("java.util.List");
    _jspx_imports_classes.add("ucl.ac.uk.notesapp.model.entity.Note");
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public boolean getErrorOnELNotFound() {
    return false;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("    <title>All Notes</title>\r\n");
      out.write("    <style>\r\n");
      out.write("        body {\r\n");
      out.write("            margin: 0;\r\n");
      out.write("            font-family: 'Arial', sans-serif;\r\n");
      out.write("            background-color: #000;\r\n");
      out.write("            color: #fff;\r\n");
      out.write("            display: flex;\r\n");
      out.write("            height: 100vh;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        .container {\r\n");
      out.write("            display: flex;\r\n");
      out.write("            width: 100%;\r\n");
      out.write("            height: 100%;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        /* 侧边栏样式 */\r\n");
      out.write("        .sidebar {\r\n");
      out.write("            width: 20%; /* 1:4 比例 */\r\n");
      out.write("            background-color: #1a1a1a;\r\n");
      out.write("            padding: 20px;\r\n");
      out.write("            display: flex;\r\n");
      out.write("            flex-direction: column;\r\n");
      out.write("            border-right: 1px solid #333;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        #subjects-container {\r\n");
      out.write("            flex: 1;\r\n");
      out.write("            display: flex;\r\n");
      out.write("            flex-direction: column;\r\n");
      out.write("            justify-content: space-between;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        .subject-btn {\r\n");
      out.write("            background: none;\r\n");
      out.write("            border: none;\r\n");
      out.write("            color: #fff;\r\n");
      out.write("            padding: 10px;\r\n");
      out.write("            text-align: left;\r\n");
      out.write("            font-size: 16px;\r\n");
      out.write("            cursor: pointer;\r\n");
      out.write("            border-left: 4px solid transparent;\r\n");
      out.write("            transition: background-color 0.3s, border-color 0.3s;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        .subject-btn:hover {\r\n");
      out.write("            background-color: #333;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        .subject-btn.selected {\r\n");
      out.write("            background-color: #333;\r\n");
      out.write("            border-left: 4px solid cyan;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        .sidebar-divider {\r\n");
      out.write("            border-top: 1px solid #444;\r\n");
      out.write("            margin: 10px 0;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        /* 主内容区域 */\r\n");
      out.write("        .main-content {\r\n");
      out.write("            width: 80%; /* 1:4 比例 */\r\n");
      out.write("            padding: 20px;\r\n");
      out.write("            background-color: #000;\r\n");
      out.write("            overflow-y: auto;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        .sort-container {\r\n");
      out.write("            display: flex;\r\n");
      out.write("            align-items: center;\r\n");
      out.write("            gap: 10px;\r\n");
      out.write("            margin-bottom: 20px;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        .sort-container label {\r\n");
      out.write("            font-size: 14px;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        #sortSelect {\r\n");
      out.write("            padding: 5px;\r\n");
      out.write("            background-color: #333;\r\n");
      out.write("            color: #fff;\r\n");
      out.write("            border: 1px solid #444;\r\n");
      out.write("            border-radius: 5px;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        /* 笔记列表 */\r\n");
      out.write("        .note-container {\r\n");
      out.write("            display: flex;\r\n");
      out.write("            flex-direction: column;\r\n");
      out.write("            gap: 10px;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        .note-block {\r\n");
      out.write("            display: flex;\r\n");
      out.write("            align-items: center;\r\n");
      out.write("            background-color: #1a1a1a;\r\n");
      out.write("            border-radius: 5px;\r\n");
      out.write("            padding: 10px;\r\n");
      out.write("            transition: background-color 0.3s;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        .note-block:hover {\r\n");
      out.write("            background-color: #333;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        .note-block button {\r\n");
      out.write("            background: none;\r\n");
      out.write("            border: none;\r\n");
      out.write("            color: #fff;\r\n");
      out.write("            flex: 1;\r\n");
      out.write("            text-align: left;\r\n");
      out.write("            cursor: pointer;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        .note-title {\r\n");
      out.write("            font-size: 16px;\r\n");
      out.write("            font-weight: bold;\r\n");
      out.write("            margin-bottom: 5px;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        .note-times {\r\n");
      out.write("            font-size: 12px;\r\n");
      out.write("            color: #aaa;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        .note-times p {\r\n");
      out.write("            margin: 2px 0;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        .note-actions {\r\n");
      out.write("            flex: 0 0 100px;\r\n");
      out.write("            display: flex;\r\n");
      out.write("            gap: 10px;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        .action-btn {\r\n");
      out.write("            padding: 5px 10px;\r\n");
      out.write("            border: 1px solid #444;\r\n");
      out.write("            border-radius: 3px;\r\n");
      out.write("            background-color: #333;\r\n");
      out.write("            color: #fff;\r\n");
      out.write("            cursor: pointer;\r\n");
      out.write("            transition: background-color 0.3s;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        .action-btn:hover {\r\n");
      out.write("            background-color: #555;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        .delete-btn {\r\n");
      out.write("            color: #d00;\r\n");
      out.write("            border-color: #d00;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        .delete-btn:hover {\r\n");
      out.write("            background-color: #d00;\r\n");
      out.write("            color: #fff;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        .empty-message {\r\n");
      out.write("            text-align: center;\r\n");
      out.write("            padding: 20px;\r\n");
      out.write("            color: #666;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        .divider {\r\n");
      out.write("            border-top: 1px solid #333;\r\n");
      out.write("            margin: 5px 0;\r\n");
      out.write("        }\r\n");
      out.write("    </style>\r\n");
      out.write("</head>\r\n");
      out.write("\r\n");
      out.write("<body>\r\n");
      out.write("<div class=\"container\">\r\n");
      out.write("    <!-- 侧边栏 -->\r\n");
      out.write("    <div class=\"sidebar\">\r\n");
      out.write("        <div id=\"subjects-container\">\r\n");
      out.write("            <div>\r\n");
      out.write("                <!-- All Notes 在顶部 -->\r\n");
      out.write("                <form action=\"/note/noteList\" method=\"get\">\r\n");
      out.write("                    <button type=\"submit\" class=\"subject-btn\" data-subject=\"all\">All Notes</button>\r\n");
      out.write("                </form>\r\n");
      out.write("                <div class=\"sidebar-divider\"></div>\r\n");
      out.write("\r\n");
      out.write("                <!-- Subjects 在中间 -->\r\n");
      out.write("                ");
 List<String> subjects = (List<String>) request.getAttribute("subjects");
                    if (subjects != null) {
                        for (String subject : subjects) { 
      out.write("\r\n");
      out.write("                <form action=\"/note/noteList\" method=\"get\">\r\n");
      out.write("                    <input type=\"hidden\" name=\"subject\" value=\"");
      out.print( subject );
      out.write("\">\r\n");
      out.write("                    <button type=\"submit\" class=\"subject-btn\" data-subject=\"");
      out.print( subject );
      out.write('"');
      out.write('>');
      out.print( subject );
      out.write("</button>\r\n");
      out.write("                </form>\r\n");
      out.write("                ");
 }} 
      out.write("\r\n");
      out.write("            </div>\r\n");
      out.write("\r\n");
      out.write("            <!-- RecycleBin 在底部 -->\r\n");
      out.write("            <div>\r\n");
      out.write("                <div class=\"sidebar-divider\"></div>\r\n");
      out.write("                <form action=\"/note/noteList\" method=\"get\">\r\n");
      out.write("                    <input type=\"hidden\" name=\"subject\" value=\"recycleBin\">\r\n");
      out.write("                    <button type=\"submit\" class=\"subject-btn\" data-subject=\"recycleBin\">Recycle Bin</button>\r\n");
      out.write("                </form>\r\n");
      out.write("            </div>\r\n");
      out.write("        </div>\r\n");
      out.write("    </div>\r\n");
      out.write("\r\n");
      out.write("    <!-- 主内容区域 -->\r\n");
      out.write("    <div class=\"main-content\">\r\n");
      out.write("        <!-- 排序选择 -->\r\n");
      out.write("        <div class=\"sort-container\">\r\n");
      out.write("            <label for=\"sortSelect\">Sort By: </label>\r\n");
      out.write("            <form action=\"/note/sortNotes\" method=\"post\">\r\n");
      out.write("                <select id=\"sortSelect\" name=\"sortBy\" onchange=\"this.form.submit()\">\r\n");
      out.write("                    <option value=\"modifiedTime_desc\">Modified Time (Desc)</option>\r\n");
      out.write("                    <option value=\"modifiedTime_asc\">Modified Time (Asc)</option>\r\n");
      out.write("                    <option value=\"createdTime_desc\">Created Time (Desc)</option>\r\n");
      out.write("                    <option value=\"createdTime_asc\">Created Time (Asc)</option>\r\n");
      out.write("                    <option value=\"title_desc\">Title (Desc)</option>\r\n");
      out.write("                    <option value=\"title_asc\">Title (Asc)</option>\r\n");
      out.write("                </select>\r\n");
      out.write("            </form>\r\n");
      out.write("        </div>\r\n");
      out.write("\r\n");
      out.write("        <!-- 笔记列表 -->\r\n");
      out.write("        <div class=\"note-container\" id=\"noteList\">\r\n");
      out.write("            ");
 List<Note> notes = (List<Note>) request.getAttribute("notes");
                if (notes == null || notes.isEmpty()) { 
      out.write("\r\n");
      out.write("            <div class=\"empty-message\">No notes available</div>\r\n");
      out.write("            ");
 } else {
                for (Note note : notes) {
                    if (!note.isInTrash() || (request.getAttribute("currentSubject") != null && request.getAttribute("currentSubject").equals("recycleBin"))) { 
      out.write("\r\n");
      out.write("            <div class=\"note-block\">\r\n");
      out.write("                <form action=\"/note/loadForm\" method=\"post\" style=\"flex: 1;\">\r\n");
      out.write("                    <input type=\"hidden\" name=\"id\" value=\"");
      out.print(note.getCreatedTime());
      out.write("\">\r\n");
      out.write("                    <input type=\"hidden\" name=\"mode\" value=\"edit\">\r\n");
      out.write("                    <button type=\"submit\" class=\"note-block\">\r\n");
      out.write("                        <span class=\"note-title\">");
      out.print(note.getTitle());
      out.write("</span>\r\n");
      out.write("                        <div class=\"note-times\">\r\n");
      out.write("                            <p>Modified: ");
      out.print(note.showModifiedTime());
      out.write("</p>\r\n");
      out.write("                            <p>Created: ");
      out.print(note.showCreatedTime());
      out.write("</p>\r\n");
      out.write("                        </div>\r\n");
      out.write("                    </button>\r\n");
      out.write("                </form>\r\n");
      out.write("                <div class=\"note-actions\">\r\n");
      out.write("                    <button class=\"action-btn rename-btn\" onclick=\"renameNote('");
      out.print(note.getCreatedTime());
      out.write("')\">Rename</button>\r\n");
      out.write("                    <form action=\"/note/delete\" method=\"post\" style=\"display:inline;\">\r\n");
      out.write("                        <input type=\"hidden\" name=\"id\" value=\"");
      out.print(note.getCreatedTime());
      out.write("\">\r\n");
      out.write("                        <button type=\"submit\" class=\"action-btn delete-btn\">Delete</button>\r\n");
      out.write("                    </form>\r\n");
      out.write("                </div>\r\n");
      out.write("            </div>\r\n");
      out.write("            <div class=\"divider\"></div>\r\n");
      out.write("            ");
 }}}            
      out.write("\r\n");
      out.write("        </div>\r\n");
      out.write("    </div>\r\n");
      out.write("</div>\r\n");
      out.write("\r\n");
      out.write("<script>\r\n");
      out.write("    document.addEventListener(\"DOMContentLoaded\", function() {\r\n");
      out.write("        // 排序选择逻辑\r\n");
      out.write("        const sortSelect = document.getElementById(\"sortSelect\");\r\n");
      out.write("        const currentSortBy = '");
      out.print(request.getAttribute("sortBy") != null ? request.getAttribute("sortBy") : "modifiedTime_desc" );
      out.write("';\r\n");
      out.write("        sortSelect.value = currentSortBy;\r\n");
      out.write("\r\n");
      out.write("        // Subject 高亮逻辑\r\n");
      out.write("        const currentSubject = '");
      out.print(request.getAttribute("currentSubject") != null ? request.getAttribute("currentSubject") : "all" );
      out.write("';\r\n");
      out.write("        const subjectButtons = document.querySelectorAll('.subject-btn');\r\n");
      out.write("        subjectButtons.forEach(button => {\r\n");
      out.write("            const buttonSubject = button.getAttribute('data-subject');\r\n");
      out.write("            if ((currentSubject === 'all' && buttonSubject === 'all') || (currentSubject === buttonSubject)) {\r\n");
      out.write("                button.classList.add('selected');\r\n");
      out.write("            }\r\n");
      out.write("        });\r\n");
      out.write("    });\r\n");
      out.write("\r\n");
      out.write("    function renameNote(noteId) {\r\n");
      out.write("        const newTitle = prompt(\"Enter new title:\");\r\n");
      out.write("        if (newTitle && newTitle.trim() !== \"\") {\r\n");
      out.write("            const form = document.createElement('form');\r\n");
      out.write("            form.method = 'post';\r\n");
      out.write("            form.action = '/note/rename';\r\n");
      out.write("\r\n");
      out.write("            const idInput = document.createElement('input');\r\n");
      out.write("            idInput.type = 'hidden';\r\n");
      out.write("            idInput.name = 'id';\r\n");
      out.write("            idInput.value = noteId;\r\n");
      out.write("\r\n");
      out.write("            const titleInput = document.createElement('input');\r\n");
      out.write("            titleInput.type = 'hidden';\r\n");
      out.write("            titleInput.name = 'newTitle';\r\n");
      out.write("            titleInput.value = newTitle.trim();\r\n");
      out.write("\r\n");
      out.write("            form.appendChild(idInput);\r\n");
      out.write("            form.appendChild(titleInput);\r\n");
      out.write("            document.body.appendChild(form);\r\n");
      out.write("            form.submit();\r\n");
      out.write("        }\r\n");
      out.write("    }\r\n");
      out.write("</script>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
