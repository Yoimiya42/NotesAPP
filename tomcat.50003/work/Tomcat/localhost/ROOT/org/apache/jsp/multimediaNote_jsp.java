/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/11.0.4
 * Generated at: 2025-03-15 00:39:53 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;
import ucl.ac.uk.notesapp.model.entity.*;
import java.util.List;

public final class multimediaNote_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports,
                 org.apache.jasper.runtime.JspSourceDirectives {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(6);
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("ucl.ac.uk.notesapp.model.entity");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = new java.util.LinkedHashSet<>(2);
    _jspx_imports_classes.add("java.util.List");
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public boolean getErrorOnELNotFound() {
    return false;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html lang=\"en\">\r\n");
      out.write("<head>\r\n");
      out.write("    <meta charset=\"UTF-8\">\r\n");
      out.write("    <title>Multimedia Note</title>\r\n");
      out.write("    <link rel=\"stylesheet\" href=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/css/multimediaNote.css\">\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");

    boolean isEdit = "edit".equals(request.getAttribute("action"));
    Note note = isEdit ? (Note) request.getAttribute("note") : null;
    MultimediaNote multimediaNote = isEdit ? (MultimediaNote) note : null;

      out.write("\r\n");
      out.write("<div class=\"form-container\">\r\n");
      out.write("    <h2>");
      out.print( isEdit ? "Edit Multimedia Note" : "New Multimedia Note" );
      out.write("</h2>\r\n");
      out.write("    <form id=\"multimediaForm\" action=\"");
      out.print( isEdit ? "/crud/updateNote?id=" + note.getId() : "/crud/createNote" );
      out.write("\"\r\n");
      out.write("          method=\"post\" enctype=\"multipart/form-data\">\r\n");
      out.write("        <input type=\"hidden\" name=\"noteType\" value=\"multimedia\">\r\n");
      out.write("        ");
 if (isEdit) { 
      out.write("\r\n");
      out.write("        <input type=\"hidden\" name=\"id\" value=\"");
      out.print( note.getId() );
      out.write("\">\r\n");
      out.write("        ");
 } 
      out.write("\r\n");
      out.write("\r\n");
      out.write("        <input type=\"text\" name=\"title\" id=\"noteTitle\" placeholder=\"Input title...\" required\r\n");
      out.write("               value=\"");
      out.print( isEdit ? note.getTitle() : "" );
      out.write("\">\r\n");
      out.write("\r\n");
      out.write("        <select name=\"subject\" id=\"noteSubject\">\r\n");
      out.write("            ");
 List<String> subjects = (List<String>) request.getAttribute("subjects");
                for (String subject : subjects) { 
      out.write("\r\n");
      out.write("            <option value=\"");
      out.print( subject );
      out.write('"');
      out.write(' ');
      out.print( isEdit && subject.equals(note.getSubject()) ? "selected" : "" );
      out.write(">\r\n");
      out.write("                ");
      out.print( subject );
      out.write("\r\n");
      out.write("            </option>\r\n");
      out.write("            ");
 } 
      out.write("\r\n");
      out.write("        </select>\r\n");
      out.write("\r\n");
      out.write("        <div class=\"tags-section\">\r\n");
      out.write("            ");
 List<String> noteTags = isEdit ? note.getTags() : null; 
      out.write("\r\n");
      out.write("            <input type=\"checkbox\" name=\"tags\" value=\"Star\" ");
      out.print( (noteTags != null && noteTags.contains("Star")) ?
                    "checked" : "" );
      out.write(" id=\"tagStar\"><label for=\"tagStar\">Star</label>\r\n");
      out.write("            <input type=\"checkbox\" name=\"tags\" value=\"Urgent\" ");
      out.print( (noteTags != null && noteTags.contains("Urgent")) ?
                    "checked" : "" );
      out.write(" id=\"tagUrgent\"><label for=\"tagUrgent\">Urgent</label>\r\n");
      out.write("            <input type=\"checkbox\" name=\"tags\" value=\"Pending\" ");
      out.print( (noteTags != null && noteTags.contains("Pending")) ?
                    "checked" : "" );
      out.write(" id=\"tagPending\"><label for=\"tagPending\">Pending</label>\r\n");
      out.write("            <input type=\"checkbox\" name=\"tags\" value=\"Review\" ");
      out.print( (noteTags != null && noteTags.contains("Review")) ?
                    "checked" : "" );
      out.write(" id=\"tagReview\"><label for=\"tagReview\">Review</label>\r\n");
      out.write("            <input type=\"checkbox\" name=\"tags\" value=\"Idea\" ");
      out.print( (noteTags != null && noteTags.contains("Idea")) ?
                    "checked" : "" );
      out.write(" id=\"tagIdea\"><label for=\"tagIdea\">Idea</label>\r\n");
      out.write("        </div>\r\n");
      out.write("\r\n");
      out.write("        <!-- Container for media items (images, links, descriptions) -->\r\n");
      out.write("        <div id=\"mediaItems\">\r\n");
      out.write("            ");
 if (isEdit && multimediaNote.getMediaItems() != null && !multimediaNote.getMediaItems().isEmpty()) {
                int i = 1;
                for (MediaItem item : multimediaNote.getMediaItems()) { 
      out.write("\r\n");
      out.write("            <div class=\"media-item\">\r\n");
      out.write("                ");
 if (item.getImageUrl() != null) { 
      out.write("\r\n");
      out.write("                <p>Current Image: <img src=\"");
      out.print( item.getImageUrl() );
      out.write("\" alt=\"Current Image\"></p>\r\n");
      out.write("                <input type=\"hidden\" name=\"existingImageUrl");
      out.print( i );
      out.write("\" value=\"");
      out.print( item.getImageUrl() );
      out.write("\">\r\n");
      out.write("                ");
 } 
      out.write("\r\n");
      out.write("                <input type=\"file\" name=\"imageFile");
      out.print( i );
      out.write("\" accept=\"image/*\">\r\n");
      out.write("                <input type=\"text\" name=\"hyperLink");
      out.print( i );
      out.write("\" placeholder=\"Hyperlink (optional)\" value=\"");
      out.print( item.getHyperLink() != null ? item.getHyperLink() : "" );
      out.write("\">\r\n");
      out.write("                <textarea name=\"description");
      out.print( i );
      out.write("\" placeholder=\"Description (optional)\">");
      out.print( item.getDescription() != null ? item.getDescription() : "" );
      out.write("</textarea>\r\n");
      out.write("            </div>\r\n");
      out.write("            ");
 i++; }
            } else { 
      out.write("\r\n");
      out.write("            <!-- Default media item for new note -->\r\n");
      out.write("            <div class=\"media-item\">\r\n");
      out.write("                <input type=\"file\" name=\"imageFile1\" accept=\"image/*\">\r\n");
      out.write("                <input type=\"text\" name=\"hyperLink1\" placeholder=\"Hyperlink (optional)\">\r\n");
      out.write("                <textarea name=\"description1\" placeholder=\"Description (optional)\"></textarea>\r\n");
      out.write("            </div>\r\n");
      out.write("            ");
 } 
      out.write("\r\n");
      out.write("        </div>\r\n");
      out.write("\r\n");
      out.write("        <button type=\"button\" onclick=\"addMediaItem()\">Add Media</button>\r\n");
      out.write("        <button type=\"button\" onclick=\"previewMedia()\">Preview</button>\r\n");
      out.write("        <button type=\"submit\">Save</button>\r\n");
      out.write("        <a href=\"/load/loadNoteList\">Back to All Notes</a>\r\n");
      out.write("    </form>\r\n");
      out.write("</div>\r\n");
      out.write("\r\n");
      out.write("<div class=\"preview-container\">\r\n");
      out.write("    <h2>Preview</h2>\r\n");
      out.write("    <div id=\"previewArea\"></div>\r\n");
      out.write("</div>\r\n");
      out.write("\r\n");
      out.write("<script>\r\n");
      out.write("    let mediaCount = ");
      out.print( isEdit && multimediaNote.getMediaItems() != null ? multimediaNote.getMediaItems().size() : 1 );
      out.write(";\r\n");
      out.write("\r\n");
      out.write("    //Adds a new media item section to the form dynamically.\r\n");
      out.write("    function addMediaItem() {\r\n");
      out.write("        mediaCount++;\r\n");
      out.write("        const container = document.getElementById(\"mediaItems\");\r\n");
      out.write("        const newItem = document.createElement(\"div\");\r\n");
      out.write("        newItem.className = \"media-item\";\r\n");
      out.write("        newItem.innerHTML = `\r\n");
      out.write("            <input type=\"file\" name=\"imageFile");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${mediaCount}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\" accept=\"image/*\">\r\n");
      out.write("            <input type=\"text\" name=\"hyperLink");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${mediaCount}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\" placeholder=\"Hyperlink (optional)\">\r\n");
      out.write("            <textarea name=\"description");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${mediaCount}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\" placeholder=\"Description (optional)\"></textarea>\r\n");
      out.write("        `;\r\n");
      out.write("        container.appendChild(newItem);\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    function previewMedia() {\r\n");
      out.write("        const previewArea = document.getElementById(\"previewArea\");\r\n");
      out.write("        previewArea.innerHTML = \"\";\r\n");
      out.write("\r\n");
      out.write("        const mediaItems = document.querySelectorAll(\".media-item\");\r\n");
      out.write("        mediaItems.forEach((item, index) => {\r\n");
      out.write("            const i = index + 1;\r\n");
      out.write("            const fileInput = item.querySelector(\"input[name='imageFile\" + i + \"']\");\r\n");
      out.write("            const hyperLinkInput = item.querySelector(`input[name='hyperLink");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${i}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("']`);\r\n");
      out.write("            const descriptionInput = item.querySelector(`textarea[name='description");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${i}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("']`);\r\n");
      out.write("            const existingImageUrl = item.querySelector(`input[name='existingImageUrl");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${i}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("']`)?.value;\r\n");
      out.write("\r\n");
      out.write("            const hyperLink = hyperLinkInput?.value || \"\";\r\n");
      out.write("            const description = descriptionInput?.value || \"\";\r\n");
      out.write("            const mediaDiv = document.createElement(\"div\");\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("            if (fileInput?.files?.[0]) {\r\n");
      out.write("                const img = document.createElement(\"img\");\r\n");
      out.write("                img.src = URL.createObjectURL(fileInput.files[0]);\r\n");
      out.write("                mediaDiv.appendChild(img);\r\n");
      out.write("            }\r\n");
      out.write("\r\n");
      out.write("            else if (existingImageUrl) {\r\n");
      out.write("                const img = document.createElement(\"img\");\r\n");
      out.write("                img.src = existingImageUrl;\r\n");
      out.write("                mediaDiv.appendChild(img);\r\n");
      out.write("            }\r\n");
      out.write("\r\n");
      out.write("            if (hyperLink) {\r\n");
      out.write("                const link = document.createElement(\"a\");\r\n");
      out.write("                link.href = hyperLink;\r\n");
      out.write("                link.textContent = hyperLink;\r\n");
      out.write("                link.target = \"_blank\";\r\n");
      out.write("                mediaDiv.appendChild(link);\r\n");
      out.write("            }\r\n");
      out.write("\r\n");
      out.write("            if (description) {\r\n");
      out.write("                const desc = document.createElement(\"p\");\r\n");
      out.write("                desc.textContent = description;\r\n");
      out.write("                mediaDiv.appendChild(desc);\r\n");
      out.write("            }\r\n");
      out.write("\r\n");
      out.write("            if (mediaDiv.children.length > 0) {\r\n");
      out.write("                previewArea.appendChild(mediaDiv);\r\n");
      out.write("            }\r\n");
      out.write("        });\r\n");
      out.write("    }\r\n");
      out.write("</script>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
